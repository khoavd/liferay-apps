/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dogoo.sample.pet.service.service.base;

import com.dogoo.sample.pet.service.model.AnimalTagEntry;
import com.dogoo.sample.pet.service.service.AnimalTagEntryLocalService;
import com.dogoo.sample.pet.service.service.AnimalTagEntryLocalServiceUtil;
import com.dogoo.sample.pet.service.service.persistence.AnimalGroupEntryPersistence;
import com.dogoo.sample.pet.service.service.persistence.AnimalTagEntryPersistence;
import com.dogoo.sample.pet.service.service.persistence.DogEntryPersistence;
import com.dogoo.sample.pet.service.service.persistence.PetEntryPersistence;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.sql.dsl.query.DSLQuery;
import com.liferay.portal.aop.AopService;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalService;
import com.liferay.portal.kernel.service.persistence.BasePersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;

import java.io.Serializable;

import java.lang.reflect.Field;

import java.util.List;

import javax.sql.DataSource;

import org.osgi.service.component.annotations.Deactivate;
import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the animal tag entry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.dogoo.sample.pet.service.service.impl.AnimalTagEntryLocalServiceImpl}.
 * </p>
 *
 * @author khoavu
 * @see com.dogoo.sample.pet.service.service.impl.AnimalTagEntryLocalServiceImpl
 * @generated
 */
public abstract class AnimalTagEntryLocalServiceBaseImpl
	extends BaseLocalServiceImpl
	implements AnimalTagEntryLocalService, AopService, IdentifiableOSGiService {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Use <code>AnimalTagEntryLocalService</code> via injection or a <code>org.osgi.util.tracker.ServiceTracker</code> or use <code>AnimalTagEntryLocalServiceUtil</code>.
	 */

	/**
	 * Adds the animal tag entry to the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect AnimalTagEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param animalTagEntry the animal tag entry
	 * @return the animal tag entry that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AnimalTagEntry addAnimalTagEntry(AnimalTagEntry animalTagEntry) {
		animalTagEntry.setNew(true);

		return animalTagEntryPersistence.update(animalTagEntry);
	}

	/**
	 * Creates a new animal tag entry with the primary key. Does not add the animal tag entry to the database.
	 *
	 * @param animalTagId the primary key for the new animal tag entry
	 * @return the new animal tag entry
	 */
	@Override
	@Transactional(enabled = false)
	public AnimalTagEntry createAnimalTagEntry(long animalTagId) {
		return animalTagEntryPersistence.create(animalTagId);
	}

	/**
	 * Deletes the animal tag entry with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect AnimalTagEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param animalTagId the primary key of the animal tag entry
	 * @return the animal tag entry that was removed
	 * @throws PortalException if a animal tag entry with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AnimalTagEntry deleteAnimalTagEntry(long animalTagId)
		throws PortalException {

		return animalTagEntryPersistence.remove(animalTagId);
	}

	/**
	 * Deletes the animal tag entry from the database. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect AnimalTagEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param animalTagEntry the animal tag entry
	 * @return the animal tag entry that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public AnimalTagEntry deleteAnimalTagEntry(AnimalTagEntry animalTagEntry) {
		return animalTagEntryPersistence.remove(animalTagEntry);
	}

	@Override
	public <T> T dslQuery(DSLQuery dslQuery) {
		return animalTagEntryPersistence.dslQuery(dslQuery);
	}

	@Override
	public int dslQueryCount(DSLQuery dslQuery) {
		Long count = dslQuery(dslQuery);

		return count.intValue();
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(
			AnimalTagEntry.class, clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return animalTagEntryPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.dogoo.sample.pet.service.model.impl.AnimalTagEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end) {

		return animalTagEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.dogoo.sample.pet.service.model.impl.AnimalTagEntryModelImpl</code>.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(
		DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator<T> orderByComparator) {

		return animalTagEntryPersistence.findWithDynamicQuery(
			dynamicQuery, start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return animalTagEntryPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(
		DynamicQuery dynamicQuery, Projection projection) {

		return animalTagEntryPersistence.countWithDynamicQuery(
			dynamicQuery, projection);
	}

	@Override
	public AnimalTagEntry fetchAnimalTagEntry(long animalTagId) {
		return animalTagEntryPersistence.fetchByPrimaryKey(animalTagId);
	}

	/**
	 * Returns the animal tag entry matching the UUID and group.
	 *
	 * @param uuid the animal tag entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching animal tag entry, or <code>null</code> if a matching animal tag entry could not be found
	 */
	@Override
	public AnimalTagEntry fetchAnimalTagEntryByUuidAndGroupId(
		String uuid, long groupId) {

		return animalTagEntryPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the animal tag entry with the matching external reference code and company.
	 *
	 * @param companyId the primary key of the company
	 * @param externalReferenceCode the animal tag entry's external reference code
	 * @return the matching animal tag entry, or <code>null</code> if a matching animal tag entry could not be found
	 */
	@Override
	public AnimalTagEntry fetchAnimalTagEntryByExternalReferenceCode(
		long companyId, String externalReferenceCode) {

		return animalTagEntryPersistence.fetchByC_ERC(
			companyId, externalReferenceCode);
	}

	/**
	 * @deprecated As of Cavanaugh (7.4.x), replaced by {@link #fetchAnimalTagEntryByExternalReferenceCode(long, String)}
	 */
	@Deprecated
	@Override
	public AnimalTagEntry fetchAnimalTagEntryByReferenceCode(
		long companyId, String externalReferenceCode) {

		return fetchAnimalTagEntryByExternalReferenceCode(
			companyId, externalReferenceCode);
	}

	/**
	 * Returns the animal tag entry with the matching external reference code and company.
	 *
	 * @param companyId the primary key of the company
	 * @param externalReferenceCode the animal tag entry's external reference code
	 * @return the matching animal tag entry
	 * @throws PortalException if a matching animal tag entry could not be found
	 */
	@Override
	public AnimalTagEntry getAnimalTagEntryByExternalReferenceCode(
			long companyId, String externalReferenceCode)
		throws PortalException {

		return animalTagEntryPersistence.findByC_ERC(
			companyId, externalReferenceCode);
	}

	/**
	 * Returns the animal tag entry with the primary key.
	 *
	 * @param animalTagId the primary key of the animal tag entry
	 * @return the animal tag entry
	 * @throws PortalException if a animal tag entry with the primary key could not be found
	 */
	@Override
	public AnimalTagEntry getAnimalTagEntry(long animalTagId)
		throws PortalException {

		return animalTagEntryPersistence.findByPrimaryKey(animalTagId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery =
			new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(animalTagEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AnimalTagEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("animalTagId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery
		getIndexableActionableDynamicQuery() {

		IndexableActionableDynamicQuery indexableActionableDynamicQuery =
			new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(
			animalTagEntryLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(AnimalTagEntry.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"animalTagId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {

		actionableDynamicQuery.setBaseLocalService(animalTagEntryLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(AnimalTagEntry.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("animalTagId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {

		final ExportActionableDynamicQuery exportActionableDynamicQuery =
			new ExportActionableDynamicQuery() {

				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary =
						portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(
						stagedModelType, modelAdditionCount);

					long modelDeletionCount =
						ExportImportHelperUtil.getModelDeletionCount(
							portletDataContext, stagedModelType);

					manifestSummary.addModelDeletionCount(
						stagedModelType, modelDeletionCount);

					return modelAdditionCount;
				}

			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(
			new ActionableDynamicQuery.AddCriteriaMethod() {

				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(
						dynamicQuery, "modifiedDate");
				}

			});

		exportActionableDynamicQuery.setCompanyId(
			portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(
			new ActionableDynamicQuery.PerformActionMethod<AnimalTagEntry>() {

				@Override
				public void performAction(AnimalTagEntry animalTagEntry)
					throws PortalException {

					StagedModelDataHandlerUtil.exportStagedModel(
						portletDataContext, animalTagEntry);
				}

			});
		exportActionableDynamicQuery.setStagedModelType(
			new StagedModelType(
				PortalUtil.getClassNameId(AnimalTagEntry.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel createPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return animalTagEntryPersistence.create(
			((Long)primaryKeyObj).longValue());
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {

		return animalTagEntryLocalService.deleteAnimalTagEntry(
			(AnimalTagEntry)persistedModel);
	}

	@Override
	public BasePersistence<AnimalTagEntry> getBasePersistence() {
		return animalTagEntryPersistence;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {

		return animalTagEntryPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the animal tag entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the animal tag entries
	 * @param companyId the primary key of the company
	 * @return the matching animal tag entries, or an empty list if no matches were found
	 */
	@Override
	public List<AnimalTagEntry> getAnimalTagEntriesByUuidAndCompanyId(
		String uuid, long companyId) {

		return animalTagEntryPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of animal tag entries matching the UUID and company.
	 *
	 * @param uuid the UUID of the animal tag entries
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of animal tag entries
	 * @param end the upper bound of the range of animal tag entries (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching animal tag entries, or an empty list if no matches were found
	 */
	@Override
	public List<AnimalTagEntry> getAnimalTagEntriesByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<AnimalTagEntry> orderByComparator) {

		return animalTagEntryPersistence.findByUuid_C(
			uuid, companyId, start, end, orderByComparator);
	}

	/**
	 * Returns the animal tag entry matching the UUID and group.
	 *
	 * @param uuid the animal tag entry's UUID
	 * @param groupId the primary key of the group
	 * @return the matching animal tag entry
	 * @throws PortalException if a matching animal tag entry could not be found
	 */
	@Override
	public AnimalTagEntry getAnimalTagEntryByUuidAndGroupId(
			String uuid, long groupId)
		throws PortalException {

		return animalTagEntryPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the animal tag entries.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to <code>com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS</code> will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent, then the query will include the default ORDER BY logic from <code>com.dogoo.sample.pet.service.model.impl.AnimalTagEntryModelImpl</code>.
	 * </p>
	 *
	 * @param start the lower bound of the range of animal tag entries
	 * @param end the upper bound of the range of animal tag entries (not inclusive)
	 * @return the range of animal tag entries
	 */
	@Override
	public List<AnimalTagEntry> getAnimalTagEntries(int start, int end) {
		return animalTagEntryPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of animal tag entries.
	 *
	 * @return the number of animal tag entries
	 */
	@Override
	public int getAnimalTagEntriesCount() {
		return animalTagEntryPersistence.countAll();
	}

	/**
	 * Updates the animal tag entry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * <p>
	 * <strong>Important:</strong> Inspect AnimalTagEntryLocalServiceImpl for overloaded versions of the method. If provided, use these entry points to the API, as the implementation logic may require the additional parameters defined there.
	 * </p>
	 *
	 * @param animalTagEntry the animal tag entry
	 * @return the animal tag entry that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public AnimalTagEntry updateAnimalTagEntry(AnimalTagEntry animalTagEntry) {
		return animalTagEntryPersistence.update(animalTagEntry);
	}

	/**
	 */
	@Override
	public void addPetEntryAnimalTagEntry(long petId, long animalTagId) {
		petEntryPersistence.addAnimalTagEntry(petId, animalTagId);
	}

	/**
	 */
	@Override
	public void addPetEntryAnimalTagEntry(
		long petId, AnimalTagEntry animalTagEntry) {

		petEntryPersistence.addAnimalTagEntry(petId, animalTagEntry);
	}

	/**
	 */
	@Override
	public void addPetEntryAnimalTagEntries(long petId, long[] animalTagIds) {
		petEntryPersistence.addAnimalTagEntries(petId, animalTagIds);
	}

	/**
	 */
	@Override
	public void addPetEntryAnimalTagEntries(
		long petId, List<AnimalTagEntry> animalTagEntries) {

		petEntryPersistence.addAnimalTagEntries(petId, animalTagEntries);
	}

	/**
	 */
	@Override
	public void clearPetEntryAnimalTagEntries(long petId) {
		petEntryPersistence.clearAnimalTagEntries(petId);
	}

	/**
	 */
	@Override
	public void deletePetEntryAnimalTagEntry(long petId, long animalTagId) {
		petEntryPersistence.removeAnimalTagEntry(petId, animalTagId);
	}

	/**
	 */
	@Override
	public void deletePetEntryAnimalTagEntry(
		long petId, AnimalTagEntry animalTagEntry) {

		petEntryPersistence.removeAnimalTagEntry(petId, animalTagEntry);
	}

	/**
	 */
	@Override
	public void deletePetEntryAnimalTagEntries(
		long petId, long[] animalTagIds) {

		petEntryPersistence.removeAnimalTagEntries(petId, animalTagIds);
	}

	/**
	 */
	@Override
	public void deletePetEntryAnimalTagEntries(
		long petId, List<AnimalTagEntry> animalTagEntries) {

		petEntryPersistence.removeAnimalTagEntries(petId, animalTagEntries);
	}

	/**
	 * Returns the petIds of the pet entries associated with the animal tag entry.
	 *
	 * @param animalTagId the animalTagId of the animal tag entry
	 * @return long[] the petIds of pet entries associated with the animal tag entry
	 */
	@Override
	public long[] getPetEntryPrimaryKeys(long animalTagId) {
		return animalTagEntryPersistence.getPetEntryPrimaryKeys(animalTagId);
	}

	/**
	 */
	@Override
	public List<AnimalTagEntry> getPetEntryAnimalTagEntries(long petId) {
		return animalTagEntryPersistence.getPetEntryAnimalTagEntries(petId);
	}

	/**
	 */
	@Override
	public List<AnimalTagEntry> getPetEntryAnimalTagEntries(
		long petId, int start, int end) {

		return animalTagEntryPersistence.getPetEntryAnimalTagEntries(
			petId, start, end);
	}

	/**
	 */
	@Override
	public List<AnimalTagEntry> getPetEntryAnimalTagEntries(
		long petId, int start, int end,
		OrderByComparator<AnimalTagEntry> orderByComparator) {

		return animalTagEntryPersistence.getPetEntryAnimalTagEntries(
			petId, start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getPetEntryAnimalTagEntriesCount(long petId) {
		return petEntryPersistence.getAnimalTagEntriesSize(petId);
	}

	/**
	 */
	@Override
	public boolean hasPetEntryAnimalTagEntry(long petId, long animalTagId) {
		return petEntryPersistence.containsAnimalTagEntry(petId, animalTagId);
	}

	/**
	 */
	@Override
	public boolean hasPetEntryAnimalTagEntries(long petId) {
		return petEntryPersistence.containsAnimalTagEntries(petId);
	}

	/**
	 */
	@Override
	public void setPetEntryAnimalTagEntries(long petId, long[] animalTagIds) {
		petEntryPersistence.setAnimalTagEntries(petId, animalTagIds);
	}

	/**
	 */
	@Override
	public void addDogEntryAnimalTagEntry(long dogId, long animalTagId) {
		dogEntryPersistence.addAnimalTagEntry(dogId, animalTagId);
	}

	/**
	 */
	@Override
	public void addDogEntryAnimalTagEntry(
		long dogId, AnimalTagEntry animalTagEntry) {

		dogEntryPersistence.addAnimalTagEntry(dogId, animalTagEntry);
	}

	/**
	 */
	@Override
	public void addDogEntryAnimalTagEntries(long dogId, long[] animalTagIds) {
		dogEntryPersistence.addAnimalTagEntries(dogId, animalTagIds);
	}

	/**
	 */
	@Override
	public void addDogEntryAnimalTagEntries(
		long dogId, List<AnimalTagEntry> animalTagEntries) {

		dogEntryPersistence.addAnimalTagEntries(dogId, animalTagEntries);
	}

	/**
	 */
	@Override
	public void clearDogEntryAnimalTagEntries(long dogId) {
		dogEntryPersistence.clearAnimalTagEntries(dogId);
	}

	/**
	 */
	@Override
	public void deleteDogEntryAnimalTagEntry(long dogId, long animalTagId) {
		dogEntryPersistence.removeAnimalTagEntry(dogId, animalTagId);
	}

	/**
	 */
	@Override
	public void deleteDogEntryAnimalTagEntry(
		long dogId, AnimalTagEntry animalTagEntry) {

		dogEntryPersistence.removeAnimalTagEntry(dogId, animalTagEntry);
	}

	/**
	 */
	@Override
	public void deleteDogEntryAnimalTagEntries(
		long dogId, long[] animalTagIds) {

		dogEntryPersistence.removeAnimalTagEntries(dogId, animalTagIds);
	}

	/**
	 */
	@Override
	public void deleteDogEntryAnimalTagEntries(
		long dogId, List<AnimalTagEntry> animalTagEntries) {

		dogEntryPersistence.removeAnimalTagEntries(dogId, animalTagEntries);
	}

	/**
	 * Returns the dogIds of the dog entries associated with the animal tag entry.
	 *
	 * @param animalTagId the animalTagId of the animal tag entry
	 * @return long[] the dogIds of dog entries associated with the animal tag entry
	 */
	@Override
	public long[] getDogEntryPrimaryKeys(long animalTagId) {
		return animalTagEntryPersistence.getDogEntryPrimaryKeys(animalTagId);
	}

	/**
	 */
	@Override
	public List<AnimalTagEntry> getDogEntryAnimalTagEntries(long dogId) {
		return animalTagEntryPersistence.getDogEntryAnimalTagEntries(dogId);
	}

	/**
	 */
	@Override
	public List<AnimalTagEntry> getDogEntryAnimalTagEntries(
		long dogId, int start, int end) {

		return animalTagEntryPersistence.getDogEntryAnimalTagEntries(
			dogId, start, end);
	}

	/**
	 */
	@Override
	public List<AnimalTagEntry> getDogEntryAnimalTagEntries(
		long dogId, int start, int end,
		OrderByComparator<AnimalTagEntry> orderByComparator) {

		return animalTagEntryPersistence.getDogEntryAnimalTagEntries(
			dogId, start, end, orderByComparator);
	}

	/**
	 */
	@Override
	public int getDogEntryAnimalTagEntriesCount(long dogId) {
		return dogEntryPersistence.getAnimalTagEntriesSize(dogId);
	}

	/**
	 */
	@Override
	public boolean hasDogEntryAnimalTagEntry(long dogId, long animalTagId) {
		return dogEntryPersistence.containsAnimalTagEntry(dogId, animalTagId);
	}

	/**
	 */
	@Override
	public boolean hasDogEntryAnimalTagEntries(long dogId) {
		return dogEntryPersistence.containsAnimalTagEntries(dogId);
	}

	/**
	 */
	@Override
	public void setDogEntryAnimalTagEntries(long dogId, long[] animalTagIds) {
		dogEntryPersistence.setAnimalTagEntries(dogId, animalTagIds);
	}

	@Deactivate
	protected void deactivate() {
		_setLocalServiceUtilService(null);
	}

	@Override
	public Class<?>[] getAopInterfaces() {
		return new Class<?>[] {
			AnimalTagEntryLocalService.class, IdentifiableOSGiService.class,
			PersistedModelLocalService.class
		};
	}

	@Override
	public void setAopProxy(Object aopProxy) {
		animalTagEntryLocalService = (AnimalTagEntryLocalService)aopProxy;

		_setLocalServiceUtilService(animalTagEntryLocalService);
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return AnimalTagEntryLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return AnimalTagEntry.class;
	}

	protected String getModelClassName() {
		return AnimalTagEntry.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = animalTagEntryPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(
				dataSource, sql);

			sqlUpdate.update();
		}
		catch (Exception exception) {
			throw new SystemException(exception);
		}
	}

	private void _setLocalServiceUtilService(
		AnimalTagEntryLocalService animalTagEntryLocalService) {

		try {
			Field field = AnimalTagEntryLocalServiceUtil.class.getDeclaredField(
				"_service");

			field.setAccessible(true);

			field.set(null, animalTagEntryLocalService);
		}
		catch (ReflectiveOperationException reflectiveOperationException) {
			throw new RuntimeException(reflectiveOperationException);
		}
	}

	@Reference
	protected AnimalGroupEntryPersistence animalGroupEntryPersistence;

	protected AnimalTagEntryLocalService animalTagEntryLocalService;

	@Reference
	protected AnimalTagEntryPersistence animalTagEntryPersistence;

	@Reference
	protected DogEntryPersistence dogEntryPersistence;

	@Reference
	protected PetEntryPersistence petEntryPersistence;

	@Reference
	protected com.liferay.counter.kernel.service.CounterLocalService
		counterLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ClassNameLocalService
		classNameLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.ResourceLocalService
		resourceLocalService;

	@Reference
	protected com.liferay.portal.kernel.service.UserLocalService
		userLocalService;

}